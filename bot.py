from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, ChatMemberUpdated
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters,
    ConversationHandler, ChatMemberHandler
)
import logging
import database as db
from utils import format_entry

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –ø–æ–∏—Å–∫–∞
CHOOSING_ACTION, CHOOSING_FORMAT, CHOOSING_CRITERIA, TYPING_QUERY, CHOOSING_DELETE_ENTRY, CONFIRM_DELETE = range(6)


# —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
INPUT_NAME, INPUT_DESC, INPUT_BREW, INPUT_PRICE, INPUT_RATING, CONFIRM = range(6, 12)

# –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.init_db()

BTN_VIEW_TABLE = "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã"
BTN_LAST_ENTRY = "üìå –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å"
BTN_ADD_ENTRY = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"
BTN_SEARCH = "üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–µ"
BTN_TEXT = "üìù –¢–µ–∫—Å—Ç"
BTN_AUDIO = "üé§ –ê—É–¥–∏–æ"
BTN_PHOTO = "üì∑ –§–æ—Ç–æ"
BTN_BACK = "üîô –ù–∞–∑–∞–¥"
BTN_BACK_TO_MENU = "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
BTN_NEXT_PAGE = "‚û°Ô∏è –î–∞–ª–µ–µ"
BTN_PREV_PAGE = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
BTN_RATING = "üåü –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É"
BTN_NAME = "üìù –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
BTN_SAVE = "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
BTN_EDIT = "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å"
BTN_DELETE = "üóë –£–¥–∞–ª–∏—Ç—å"
PAGE_SIZE = 5 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
SHOWING_PAGE = 100  # –ª—é–±–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–µ–µ—Å—è —Å –¥—Ä—É–≥–∏–º–∏
BTN_DELETE_ENTRY = "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"


def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            [BTN_ADD_ENTRY, BTN_SEARCH],
            [BTN_LAST_ENTRY, BTN_VIEW_TABLE], [BTN_DELETE_ENTRY]
        ],
        resize_keyboard=True
    )

# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message:
        return

    await update.message.reply_text(
        "üÜò <b>–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?</b>\n\n"
        "–í–æ—Ç —á—Ç–æ —É–º–µ–µ—Ç TeaPot:\n\n"
        "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å</b> ‚Äî –∑–∞–ø–∏—à–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞–µ\n"
        "üìÑ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã</b> ‚Äî –ª–∏—Å—Ç–∞–π —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏\n"
        "üìå <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å</b> ‚Äî –ø–æ–∫–∞–∂—É —Å–∞–º—É—é —Å–≤–µ–∂—É—é\n"
        "üîç <b>–ü–æ–∏—Å–∫</b> ‚Äî –∏—â–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥—É\n"
        "üóë <b>–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å</b> ‚Äî —É–±–µ—Ä–∏ –Ω–µ–Ω—É–∂–Ω–æ–µ\n\n"
        "‚Ü©Ô∏è <b>–ù–∞–∑–∞–¥</b> ‚Äî –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è\n"
        "/cancel ‚Äî —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞\n\n"
        "üëâ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∂–º–∏ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        parse_mode='HTML'
    )


#—Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–¥–∏–æ–º–æ—Å—Ç–∏ –º–µ–Ω—é
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message:
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üçµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeaPot! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )
    return CHOOSING_ACTION

async def welcome_on_open(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(update.my_chat_member, ChatMemberUpdated):
        if update.my_chat_member.new_chat_member.status == "member":
            user_id = update.effective_user.id
            text = (
                "üçµ <b>–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeaPot ‚Äî –±–æ—Ç-–¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è —á–∞–µ–º–∞–Ω–æ–≤.</b>\n\n"
                "–°–æ—Ö—Ä–∞–Ω—è–π –∑–∞–º–µ—Ç–∫–∏ –æ —á–∞—è—Ö, –æ—Ü–µ–Ω–∏–≤–∞–π, —Å–æ—Ä—Ç–∏—Ä—É–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –ª—É—á—à–∏–º –≤–∫—É—Å–∞–º –ø–æ–∑–∂–µ.\n\n"
                "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ ‚òï"
            )
            await context.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("/start")]], resize_keyboard=True),
                parse_mode="HTML"
            )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message:
        return ConversationHandler.END

    if not context.user_data.get("started"):
        context.user_data["started"] = True

        text = (
            "üçµ <b>–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeaPot ‚Äî –±–æ—Ç-–¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è —á–∞–µ–º–∞–Ω–æ–≤.</b>\n\n"
            "–°–æ—Ö—Ä–∞–Ω—è–π –∑–∞–º–µ—Ç–∫–∏ –æ —á–∞—è—Ö, –æ—Ü–µ–Ω–∏–≤–∞–π, —Å–æ—Ä—Ç–∏—Ä—É–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –ª—É—á—à–∏–º –≤–∫—É—Å–∞–º –ø–æ–∑–∂–µ.\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ ‚òï"
        )

        await update.message.reply_html(
            text,
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton(BTN_VIEW_TABLE)]],
                resize_keyboard=True
            )
        )

        # –ú–æ–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
        return CHOOSING_ACTION

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await update.message.reply_text(
        "üçµ –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
        reply_markup=main_menu_keyboard()
    )
    return CHOOSING_ACTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message:
        return ConversationHandler.END
    text = update.message.text
    if text == BTN_ADD_ENTRY:
        keyboard = [[BTN_TEXT, BTN_AUDIO, BTN_PHOTO], [BTN_BACK]]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return CHOOSING_FORMAT

    elif text == BTN_LAST_ENTRY:
        entries = db.get_entries(update.message.from_user.id)
        if entries:
            last = entries[0]
            await update.message.reply_text(
                f"üßæ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {last[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {last[3]}\n–ó–∞–≤–∞—Ä–∫–∞: {last[4]}\n"
                f"–û—Ü–µ–Ω–∫–∞: {last[5]}/10\n–¶–µ–Ω–∞: {last[6]}‚Çæ\n–î–∞—Ç–∞: {last[7]}"
            )
        else:
            await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return CHOOSING_ACTION

    elif text == BTN_VIEW_TABLE:
        context.user_data["current_page"] = 0
        return await show_entries_page(update, context)
    
    elif text == BTN_SEARCH:
        await search_entries(update, context)
        return CHOOSING_CRITERIA
    
    elif text == BTN_DELETE_ENTRY:
        return await delete_entry_start(update, context)
    
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.")
        return CHOOSING_ACTION

async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    page = context.user_data.get("current_page", 0)

    if text == BTN_NEXT_PAGE:
        context.user_data["current_page"] = page + 1
    elif text == BTN_PREV_PAGE and page > 0:
        context.user_data["current_page"] = page - 1
    elif text == BTN_BACK_TO_MENU:
        context.user_data["current_page"] = 0
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é...", reply_markup=main_menu_keyboard())
        return CHOOSING_ACTION

    return await show_entries_page(update, context)

# –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
async def show_all_entries(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    entries = db.show_all_entries(user_id)

    if not entries:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ.")
    else:
        response = ""
        for i, row in enumerate(entries, start=1):
            response += format_entry(row) + "\n\n"

        await update.message.reply_text(response[:4000])  # Telegram limit
    return CHOOSING_ACTION

async def show_entries_page(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    page = context.user_data.get("current_page", 0)
    offset = page * PAGE_SIZE

    total = db.count_entries(user_id)
    entries = db.get_entries_paginated(user_id, PAGE_SIZE, offset)

    if not entries:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return CHOOSING_ACTION

    reply = f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {(total + PAGE_SIZE - 1) // PAGE_SIZE}\n\n"
    for row in entries:
        reply += format_entry(row) + "\n\n"

    buttons = []
    if page > 0:
        buttons.append(BTN_PREV_PAGE)
    if offset + PAGE_SIZE < total:
        buttons.append(BTN_NEXT_PAGE)

    await update.message.reply_text(
        reply,
        reply_markup=ReplyKeyboardMarkup([buttons + [BTN_BACK_TO_MENU]], resize_keyboard=True)
    )

    return SHOWING_PAGE

async def delete_entry_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    print("delete_entry_start triggered")
    user_id = update.message.from_user.id
    entries = db.get_entries_paginated(user_id, limit=10, offset=0)  # –º–æ–∂–Ω–æ –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    if not entries:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return CHOOSING_ACTION

    context.user_data["delete_candidates"] = entries

    reply = "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for i, row in enumerate(entries, 1):
        reply += f"{i}. {row[2]} ‚Äî {row[4]} ‚Äî {row[5]}/10\n"

    await update.message.reply_text(reply)
    return CHOOSING_DELETE_ENTRY

async def choose_entry_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏.")
        return CHOOSING_DELETE_ENTRY

    index = int(text) - 1
    entries = context.user_data.get("delete_candidates", [])
    if index < 0 or index >= len(entries):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return CHOOSING_DELETE_ENTRY

    entry = entries[index]
    context.user_data["entry_to_delete"] = entry

    await update.message.reply_text(
        f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å:\nüçµ {entry[2]}\nüí¨ {entry[3]}\nüåü {entry[5]}/10\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        reply_markup=ReplyKeyboardMarkup([["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]], resize_keyboard=True)
    )
    return CONFIRM_DELETE

async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text.strip()
    if choice == "‚úÖ –î–∞":
        entry = context.user_data.get("entry_to_delete")
        if entry:
            db.delete_entry(entry[0])  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ row[0] ‚Äî —ç—Ç–æ ID –∑–∞–ø–∏—Å–∏
            await update.message.reply_text("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ ‚úÖ")
    else:
        await update.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    return await show_menu(update, context)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

# –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def search_entries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîé –í—ã–±–µ—Ä–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            [[BTN_RATING, BTN_NAME], [BTN_BACK]],
            resize_keyboard=True
        )
    )
    return CHOOSING_CRITERIA

# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫—Ä–∏—Ç–µ—Ä–∏–π
async def choose_criteria(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == BTN_NAME:
        context.user_data["search_by"] = "name"
        await update.message.reply_text("üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—è:")
        return TYPING_QUERY

    elif text == BTN_RATING:
        context.user_data["search_by"] = "rating"
        await update.message.reply_text("üåü –í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (1‚Äì10):")
        return TYPING_QUERY

    elif text == BTN_BACK:
        await show_menu(update, context)
        return CHOOSING_ACTION

    else:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return CHOOSING_CRITERIA
    

# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
async def handle_search_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    value = update.message.text
    criterion = context.user_data.get("search_by")

    results = []

    if criterion == "name":
        results = db.search_by_name(user_id, value)
    elif criterion == "rating":
        try:
            rating = int(value)
            results = db.search_by_rating(user_id, rating)
        except ValueError:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
            return TYPING_QUERY

    if not results:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        reply = "\n\n".join([
            f"üçµ {row[2]}\nüí¨ {row[3]}\nüîß {row[4]}\nüåü {row[5]}/10\nüí∞ {row[6]}‚Çæ"
            for row in results
        ])
        await update.message.reply_text(reply)

    await update.message.reply_text(
    "üîç –ß—Ç–æ –¥–∞–ª—å—à–µ?",
    reply_markup=main_menu_keyboard()
)
    return CHOOSING_ACTION


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
async def choose_format(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message:
        return ConversationHandler.END
    if update.message.text == BTN_TEXT:
        await update.message.reply_text("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —á–∞–π?", reply_markup=ReplyKeyboardRemove())
        return INPUT_NAME
    elif update.message.text == BTN_BACK:
        await show_menu(update, context)
        return CHOOSING_ACTION
    else:
        await update.message.reply_text("üîß –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã–±–µ—Ä–∏ '–¢–µ–∫—Å—Ç'.")
        return CHOOSING_FORMAT

# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∞–≥–∞–º
async def input_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text
    if len(name) > 100:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return INPUT_NAME
    
    context.user_data["tea_name"] = update.message.text
    await update.message.reply_text("–î–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ:")
    return INPUT_DESC

async def input_desc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["description"] = update.message.text
    await update.message.reply_text("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–≤–∞—Ä–∫–∏?")
    return INPUT_BREW

async def input_brew(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["how_to_brew"] = update.message.text
    await update.message.reply_text("–û—Ü–µ–Ω–∏ –æ—Ç 1 –¥–æ 10:")
    return INPUT_RATING

async def input_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        rating = float(update.message.text)
        if not (1 <= rating <= 10):
            raise ValueError
        context.user_data["rating"] = round(rating, 1)  # –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return INPUT_RATING

    await update.message.reply_text("–£–∫–∞–∂–∏ —Ü–µ–Ω—É –≤ –ª–∞—Ä–∏ –∑–∞ 100–≥ (–ù–∞–ø—Ä–∏–º–µ—Ä 12.50):")
    return INPUT_PRICE

async def input_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        price = float(update.message.text)
        if price < 0:
            await update.message.reply_text("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return INPUT_PRICE
        context.user_data["price"] = round(price, 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –∫–æ–ø–µ–µ–∫
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.50).")
        return INPUT_PRICE
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = context.user_data
    keyboard = [[BTN_SAVE, BTN_EDIT], [BTN_DELETE]]
    await update.message.reply_text(
        f"–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['tea_name']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"–ó–∞–≤–∞—Ä–∫–∞: {data['how_to_brew']}\n"
        f"–û—Ü–µ–Ω–∫–∞: {data['rating']}/10\n"
        f"–¶–µ–Ω–∞: {data['price']}‚Çæ",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message or not update.message.text:
        return CONFIRM
    
    text = update.message.text

    if text == BTN_SAVE:
        user_id = update.message.from_user.id
        data = context.user_data

        db.save_entry(
            user_id,
            tea_name=data["tea_name"],
            description=data["description"],
            how_to_brew=data["how_to_brew"],
            rating=data["rating"],
            price=data["price"]
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ + –∑–∞–Ω–æ–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(
            "‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
            reply_markup=main_menu_keyboard()
        )
        return CHOOSING_ACTION

    elif text == BTN_EDIT:
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É, –±–µ–∑ —Ç—Ä–æ–≥–∞–Ω–∏—è main_menu
        await update.message.reply_text("–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —á–∞–π?")
        return INPUT_NAME

    elif text == BTN_DELETE:
        context.user_data.clear()
        await update.message.reply_text(
            "üö´ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=main_menu_keyboard()
        )
        return CHOOSING_ACTION

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª, ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª –∏–ª–∏ ¬´–£–¥–∞–ª–∏—Ç—å¬ª.")
        return CONFIRM

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END

def main():
    from config import TELEGRAM_TOKEN
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start), MessageHandler(filters.Regex("^–ü–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–µ$"), search_entries),],
        states={
            SHOWING_PAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_pagination)],
            CHOOSING_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)],
            CHOOSING_FORMAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_format)],
            CHOOSING_CRITERIA: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_criteria)],
            CHOOSING_DELETE_ENTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_entry_to_delete)],
            CONFIRM_DELETE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_delete)],
            INPUT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_name)],
            INPUT_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_desc)],
            INPUT_BREW: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_brew)],
            INPUT_RATING: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_rating)],
            INPUT_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_price)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
            TYPING_QUERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_input)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(ChatMemberHandler(welcome_on_open, ChatMemberHandler.MY_CHAT_MEMBER))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(conv)
    logger.info("‚úÖ Bot started")
    application.run_polling()

if __name__ == "__main__":
    main()
